Demultiplexing

The problem is that many reads are done on a lane of Illumina sequencing. To be able to tell what fragment came from where, each sample has a unique
index code. When sequencing data is sent from Illumina, four files are recieved. These are:

    R1 = Forward Read
    R2 = Forward Indices
    R3 = Reverse Indices
    R4 = Reverse reads

First, the indices need to be checked to ensure they match the indices that were attatched to the sequences. The indices must also be high
enough quality to be confident that they are correct. Then, each index needs to be associated with each read. For example, R1 and R2 go together.
They are together line by line. It is the same with R3 and R4. If the indices in R2 and R3 are correct, then both indices will be appended
to the header for the both of the files. NOTE: R3 should be the reverse compliment of R2. Assuming everything is matched correctly, and is of 
quality, the index sequences will be appended to the reads' header and the reads will be placed into a file determined by the index (2files, 
one in fw direction, one in rv direction). If the indices do not match, or quality is too low, both reads will be placed in a different file 
called unknown.


Psuedocode:

dictionary equals barcodes as keys and values as library ID from file on talapas
list to hold unknown barcode pairs
list to hold index hopping pairs
curIndices initialization to hold the two indices in a touple
corIndexCount equals 0

reads_fw equals R1
reads_rv equals R4
ind_fw equals R2
ind_fw equals R3

def rev_comp_seq(seq: str) -> str:
    '''Takes a sequence as a string and returns the reverse compliment of that string'''
    return seq
    Input: "ACTG"
    Output: "CAGT"

to create files needed:
for key in dictionary
    open output file for writing using key as fstring for file name

open unknown files to create them
open index hopped files to create them

The two blocks above should yield 52 files

open four input files to read and all output files to write
    while true
        headers 1 and 2 readline for R1 and R4
        readline for other input files
        readline seqs for all input files
        strip newline characters

        index2 equals reverse compliment

        currIndices equals index1 and index2
        
        if index1 in barcode dictionary

            if rcindex2 equals index1
                write header for fw in fw output file with indices
                write header for rv in rv output file with indices

                write sequence for both files
                write comment line for both files with barcode pair
                write phred string for both files with barcode pair
                corIndexCount plus equals 1

            elif rcindex2 in barcode dictionary
                write the four lines for the read to index hopped file for fw with barcode pair
                write the four lines for the read to index hopped file for rv with barcode pair
                append currIndices to index hopping list

            else 
                write the four lines for the read to unknown file for fw with barcode pair
                write the four lines for the read to unknown file for rv with barcode pair
                append currIndices to unknown index list

        else    
            append currIndices to unknown barcode list

            write the four lines for the read to unknown file for fw with barcode pair
            write the four lines for the read to unknown file for rv with barcode pair


    if end of file
        break while true loop


print number of correct pairs, number of unknown pairs, number of index hopped pairs
